---
- hosts: kvm_hosts
  roles:
    - role: linux-system-roles.tuned
      vars:
        use_recommended_profile: false
        profile: virtual-host

  tasks:
  - name: Virt packages
    yum:
      name:
        - qemu-kvm 
        - libvirt
        - virt-install
        - libguestfs-tools
        - python3-lxml
       #- bridge-utils
      state: latest

  - name: libvirt service start
    service:
      name: libvirtd
      state: started
      enabled: true

  - name: polikit permission
    copy:
      dest: /etc/polkit-1/rules.d/50-libvirt.rules
      src: kvm/50-libvirt.rules
      backup: yes
      mode: "u=rw,g=r,o=r"
      owner: root
      group: root

  - name: add user to libvirt and wheel group 
    # libvirt lets them manage virt stuff per above policy
    # wheel is needed to sudo and change permissions on files to use chmod on virsh created qcow files
    user:
      name:   pladd
      groups: libvirt,wheel
      append: yes
 
- hosts: beast
  vars:
    data_dirs:
    - name: data_fast
      path: /data/libvirt_images
    - name: libvirt_images
      path: /var/lib/libvirt/images
    - name: libvirt_isos
      path: /var/lib/libvirt/images/isos
  vars_files:
    - kvm_guests.yml

  tasks:
  - name: directories
    file:
      path: "{{ item.path }}"
      state: directory
    loop: "{{ data_dirs }}"

  - name: storage pool define
    virt_pool:
      command: define
      name: "{{ item.name }}"
      xml: '{{ lookup("template", "libvirt_pool_dir.j2") }}'
    loop: "{{ data_dirs }}"

  - name: storage pool active
    virt_pool:
      state: active
      name: "{{ item.name }}"
      autostart: yes
    loop: "{{ data_dirs }}"

  - name: refresh VM pools
    command: "virsh pool-refresh {{ item.name }}"
    register: refresh
    changed_when: "refresh.rc != 0"
    loop: "{{ data_dirs }}"

  - name: get VM disks
    command: "virsh vol-list {{ item.name }}"
    register: disks
    changed_when: "disks.rc != 0"
    loop: "{{ data_dirs }}"

  - name: debug
    debug:
      var: disks

  - name: create disk
    command: >
      echo virsh vol-create-as
        {{ item.disk_pool }}
        {{ item.key }}
        --format {{ item.disk_format }}
    when: "item[key]\\.item[disk_format] not in disks.stdout"
    with_dict: "{{ guests }}"

  - name: get list of VMs
    virt:
      command: "list_vms"
    register: vms

  - name: create vm
    command: >
      virt-install --import --name {{ item.key }}
      --memory {{ item.value.mem }} --vcpus {{ item.value.cpus }}
      --disk {{ vm_location }}/{{ item.key }}.{{ item.value.file_type }}
      --noautoconsole --os-variant {{ item.value.os_type }}
    when: item.key not in vms.list_vms
    with_dict: "{{ guests }}"

  - name: start vm
    virt:
      name: "{{ item.key }}"
      state: running
    with_dict: "{{ guests }}"
...
